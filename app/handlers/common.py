from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.types import KeyboardButton

from app.handlers.kz import kz_start
from app.handlers.ru import ru_start
from app.utils import questions_ru, questions_kz
from app.db import get_database
from app.config_reader import load_config
from app.lessons import lessons, course_titles

import re

collection_name = get_database()
global_bot = None
config = load_config("config/bot.ini")



async def cmd_start(message: types.Message):
    chat_id = collection_name.find_one({"chat_id": message.chat.id})

    if chat_id:
        if chat_id['full_name']:
            if chat_id['phone']:
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for course_title in course_titles:
                    keyboard.add(course_title)
                await message.answer("–ö—É—Ä—Å—ã", reply_markup=keyboard)
            else:
                if not re.match("^(\+77\d{9}|87\d{9})$", message.text):
                    await message.answer("–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É: +77XXXXXXXXX –∏–ª–∏ 87XXXXXXXXX")
                else:
                    collection_name.update_one({'_id': chat_id['_id']}, {"$set": {'phone': message.text}}, upsert=False)
                    await global_bot.send_message(config.tg_bot.admin1_id, f"–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞:\n–ò–º—è: {chat_id['full_name']}\n–ù–æ–º–µ—Ä: {message.text}")
                    await global_bot.send_message(config.tg_bot.admin2_id,
                                                  f"–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞:\n–ò–º—è: {chat_id['full_name']}\n–ù–æ–º–µ—Ä: {message.text}")
                    await global_bot.send_message(config.tg_bot.admin3_id,
                                                  f"–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞:\n–ò–º—è: {chat_id['full_name']}\n–ù–æ–º–µ—Ä: {message.text}")
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for course_title in course_titles:
                        keyboard.add(course_title)
                    await message.answer("–ö—É—Ä—Å—ã", reply_markup=keyboard)
        else:
            collection_name.update_one({'_id': chat_id['_id']}, {"$set": {'full_name': message.text}}, upsert=False)
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä: ")
    else:
        collection_name.insert_one({'chat_id': message.chat.id, "phone": None, "full_name": None})
        await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å—ã –ø–æ –ê–≥—Ä–æ—Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—é! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
        await message.answer("–í–∞—à–µ –∏–º—è: ")


async def get_lesson(message: types.Message):
    founded = False
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    chat_id = collection_name.find_one({"chat_id": message.chat.id})
    if chat_id:
        for lesson in lessons:
            if lesson['title'] == message.text:
                course_type = lesson['course_type']
                url = lesson.get("url")
                description = lesson.get("description")
                founded = True
                break
        else:
            keyboard.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤ ‚Ü©Ô∏è')
            await message.answer("–û—à–∏–±–∫–∞!", reply_markup=keyboard)

        if founded:
            for lesson in lessons:
                if course_type == lesson['course_type'] or lesson['course_type'] == '–û–±—â–∏–π':
                    keyboard.add(lesson['title'])
            if url:
                await message.answer(url)
            await message.answer(description, reply_markup=keyboard)
    else:
        await message.answer("–°–ø–µ—Ä–≤–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!")


async def get_courses(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for lesson in lessons:
        if message.text == lesson['course_type'] or lesson['course_type'] == '–û–±—â–∏–π':
            keyboard.add(lesson['title'])

    await message.answer("–£—Ä–æ–∫–∏", reply_markup=keyboard)


async def courses_list(message: types.Message):
    chat_id = collection_name.find_one({"chat_id": message.chat.id})
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for course_title in course_titles:
        keyboard.add(course_title)
    if chat_id:
        await message.answer("–ö—É—Ä—Å—ã", reply_markup=keyboard)
    else:
        await message.answer("–°–ø–µ—Ä–≤–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!")


def register_handlers_common(dp: Dispatcher, bot):
    global global_bot
    global_bot = bot
    dp.register_message_handler(get_lesson, Text(equals="–ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å üíµ"))
    dp.register_message_handler(courses_list, Text(equals="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤ ‚Ü©Ô∏è"))
    dp.register_message_handler(get_lesson, Text(startswith="–£—Ä–æ–∫"))
    dp.register_message_handler(get_courses, Text(startswith="–ö—É—Ä—Å—ã"))
    dp.register_message_handler(cmd_start)

    # dp.register_message_handler(kz_start, Text(equals="“ö–∞–∑–∞“õ üá∞üáø"))
    # dp.register_message_handler(ru_start, Text(equals="–†—É—Å—Å–∫–∏–π üá∑üá∫"))
    # dp.register_message_handler(kz_start, Text(equals="‚¨Ö  –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ –æ—Ä–∞–ª—É"))
    # dp.register_message_handler(ru_start, Text(equals="‚¨Ö Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"))
    # dp.register_message_handler(answer_to_questions, Text(startswith="Q:"))

